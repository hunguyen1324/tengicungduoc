2023-10-05 18:24:25.589 +07 [3640] ERROR:  could not serialize access due to concurrent update
2023-10-05 18:24:25.589 +07 [3640] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (21)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-05 18:25:38.102 +07 [3640] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.108 +07 [13304] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.109 +07 [19800] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.112 +07 [7800] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.114 +07 [7948] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.115 +07 [9000] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.115 +07 [20052] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.116 +07 [8592] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:25:38.116 +07 [12992] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 18:53:45.247 +07 [4908] ERROR:  could not serialize access due to concurrent update
2023-10-05 18:53:45.247 +07 [4908] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (12)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-05 19:22:32.906 +07 [4908] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.914 +07 [14500] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.915 +07 [15976] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.917 +07 [18840] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.917 +07 [12344] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.917 +07 [7164] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.918 +07 [19588] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.919 +07 [16444] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 19:22:32.921 +07 [18632] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:02:42.756 +07 [4840] ERROR:  could not serialize access due to concurrent update
2023-10-05 22:02:42.756 +07 [4840] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (6)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-05 22:02:42.778 +07 [4840] ERROR:  could not serialize access due to concurrent update
2023-10-05 22:02:42.778 +07 [4840] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (21)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-05 22:18:21.048 +07 [4840] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.057 +07 [8392] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.057 +07 [7484] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.064 +07 [10028] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.065 +07 [11904] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.065 +07 [20136] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.066 +07 [16224] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.067 +07 [7420] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.067 +07 [16688] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 22:18:21.067 +07 [19344] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-05 23:59:02.682 +07 [12776] ERROR:  could not serialize access due to concurrent update
2023-10-05 23:59:02.682 +07 [12776] STATEMENT:  DELETE FROM ir_attachment WHERE id IN (
	            SELECT id FROM ir_attachment WHERE id in (724) FOR NO KEY UPDATE SKIP LOCKED
	        )
2023-10-06 00:20:54.846 +07 [12776] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.847 +07 [15544] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.855 +07 [5284] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.857 +07 [17188] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.859 +07 [16116] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.859 +07 [17236] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.860 +07 [12444] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.860 +07 [18324] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.860 +07 [10880] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 00:20:54.861 +07 [20452] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:28:20.398 +07 [19492] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:28:20.399 +07 [20020] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:29:21.023 +07 [12904] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:29:21.027 +07 [16532] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:29:21.028 +07 [18136] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.722 +07 [10864] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.726 +07 [18404] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.727 +07 [13504] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.727 +07 [20432] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.727 +07 [18528] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.728 +07 [14484] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.728 +07 [15944] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.728 +07 [3424] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.729 +07 [11036] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.730 +07 [17344] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.730 +07 [10464] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:31:41.734 +07 [2736] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:33:01.714 +07 [13100] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:33:01.714 +07 [10452] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:33:01.714 +07 [17804] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:36:03.248 +07 [19780] ERROR:  could not serialize access due to concurrent update
2023-10-06 10:36:03.248 +07 [19780] STATEMENT:  DELETE FROM ir_attachment WHERE id IN (
	            SELECT id FROM ir_attachment WHERE id in (1152, 1148, 1142) FOR NO KEY UPDATE SKIP LOCKED
	        )
2023-10-06 10:48:55.972 +07 [10372] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.973 +07 [19780] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.982 +07 [9368] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.982 +07 [13520] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.984 +07 [14696] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.984 +07 [16456] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.985 +07 [16996] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.985 +07 [1232] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.986 +07 [7648] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.986 +07 [17600] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 10:48:55.987 +07 [17736] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 12:30:26.242 +07 [18420] ERROR:  could not serialize access due to concurrent update
2023-10-06 12:30:26.242 +07 [18420] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                2, 'Asia/Ho_Chi_Minh', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 5 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-06 12:31:21.652 +07 [18276] ERROR:  could not serialize access due to concurrent update
2023-10-06 12:31:21.652 +07 [18276] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (9)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-06 12:32:24.827 +07 [3596] ERROR:  could not serialize access due to concurrent update
2023-10-06 12:32:24.827 +07 [3596] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                2, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 5 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-06 13:34:21.281 +07 [11840] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.284 +07 [8028] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.285 +07 [18420] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.286 +07 [16624] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.287 +07 [3596] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.289 +07 [4904] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.291 +07 [18276] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.292 +07 [6560] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 13:34:21.296 +07 [7692] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 22:06:55.453 +07 [16220] FATAL:  password authentication failed for user "postgres"
2023-10-06 22:06:55.453 +07 [16220] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 22:07:03.417 +07 [15356] FATAL:  password authentication failed for user "postgres"
2023-10-06 22:07:03.417 +07 [15356] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 22:07:26.728 +07 [17132] FATAL:  password authentication failed for user "postgres"
2023-10-06 22:07:26.728 +07 [17132] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 22:07:30.931 +07 [15076] FATAL:  password authentication failed for user "postgres"
2023-10-06 22:07:30.931 +07 [15076] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 22:07:41.120 +07 [15648] FATAL:  password authentication failed for user "hunguyen1324"
2023-10-06 22:07:41.120 +07 [15648] DETAIL:  Password does not match for user "hunguyen1324".
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 22:08:19.044 +07 [9444] FATAL:  password authentication failed for user "postgres"
2023-10-06 22:08:19.044 +07 [9444] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-06 23:21:10.988 +07 [20376] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:21:10.989 +07 [14536] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.299 +07 [3068] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.299 +07 [14836] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.300 +07 [14920] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.301 +07 [10112] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.306 +07 [2084] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.307 +07 [19676] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.307 +07 [8832] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.307 +07 [13908] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-06 23:23:31.312 +07 [16680] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:21:38.876 +07 [15992] ERROR:  could not serialize access due to concurrent update
2023-10-07 08:21:38.876 +07 [15992] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                2, 'Asia/Ho_Chi_Minh', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 5 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 08:22:31.273 +07 [15992] ERROR:  could not serialize access due to concurrent update
2023-10-07 08:22:31.273 +07 [15992] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (2)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-07 08:22:31.312 +07 [15992] ERROR:  could not serialize access due to concurrent update
2023-10-07 08:22:31.312 +07 [15992] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (9)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-07 08:55:09.893 +07 [15992] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.903 +07 [16656] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.904 +07 [10600] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.905 +07 [9328] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.906 +07 [13924] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.906 +07 [3924] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.907 +07 [8044] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.907 +07 [11900] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 08:55:09.907 +07 [10824] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 09:10:41.181 +07 [12116] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 09:10:41.181 +07 [20280] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 09:10:41.184 +07 [7852] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:04:54.196 +07 [12388] ERROR:  canceling statement due to lock timeout
2023-10-07 10:04:54.196 +07 [12388] STATEMENT:  ALTER TABLE "res_users" ADD COLUMN "livechat_username" VARCHAR 
2023-10-07 10:05:12.418 +07 [5648] ERROR:  canceling statement due to lock timeout
2023-10-07 10:05:12.418 +07 [5648] STATEMENT:  ALTER TABLE "res_users" ADD COLUMN "livechat_username" VARCHAR 
2023-10-07 10:05:31.418 +07 [18460] ERROR:  canceling statement due to lock timeout
2023-10-07 10:05:31.418 +07 [18460] STATEMENT:  ALTER TABLE "res_users" ADD COLUMN "livechat_username" VARCHAR 
2023-10-07 10:05:54.134 +07 [2032] ERROR:  canceling statement due to lock timeout
2023-10-07 10:05:54.134 +07 [2032] STATEMENT:  ALTER TABLE "res_users" ADD COLUMN "livechat_username" VARCHAR 
2023-10-07 10:06:21.511 +07 [2400] ERROR:  canceling statement due to lock timeout
2023-10-07 10:06:21.511 +07 [2400] STATEMENT:  ALTER TABLE "website" ADD COLUMN "channel_id" int4 
2023-10-07 10:08:55.887 +07 [2400] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.887 +07 [18460] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.887 +07 [12388] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.887 +07 [2032] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.887 +07 [5648] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.896 +07 [6380] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.897 +07 [9664] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.897 +07 [13740] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.897 +07 [14988] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.898 +07 [8676] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:08:55.898 +07 [7880] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.145 +07 [18404] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.148 +07 [13276] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.148 +07 [13524] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.148 +07 [12856] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.149 +07 [10004] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.151 +07 [12800] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.151 +07 [620] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 10:54:08.152 +07 [6100] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:00:43.387 +07 [12368] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:00:43.387 +07 [12368] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:00:48.252 +07 [14124] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:00:48.252 +07 [14124] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:00:53.729 +07 [19488] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:00:53.729 +07 [19488] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:01:00.419 +07 [16316] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:01:00.419 +07 [16316] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:01:05.339 +07 [15112] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:01:05.339 +07 [15112] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:01:08.784 +07 [2180] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:01:08.784 +07 [2180] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:02:01.682 +07 [12176] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:02:01.682 +07 [12176] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:02:12.124 +07 [13216] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:02:12.124 +07 [13216] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:02:15.982 +07 [516] FATAL:  password authentication failed for user "postgres"
2023-10-07 11:02:15.982 +07 [516] DETAIL:  Role "postgres" does not exist.
	Connection matched pg_hba.conf line 86: "host    all             all             ::1/128                 md5"
2023-10-07 11:02:52.630 +07 [9572] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:02:52.640 +07 [13988] LOG:  could not send data to client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:02:52.641 +07 [13988] FATAL:  connection to client lost
2023-10-07 11:06:13.440 +07 [3144] ERROR:  could not serialize access due to concurrent update
2023-10-07 11:06:13.440 +07 [3144] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 11:23:13.917 +07 [3144] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.918 +07 [19276] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.922 +07 [9636] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.923 +07 [7992] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.924 +07 [17140] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.928 +07 [14320] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.930 +07 [6000] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:23:13.932 +07 [15064] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.237 +07 [6948] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.237 +07 [8360] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.238 +07 [15072] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.238 +07 [10868] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.241 +07 [19776] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.242 +07 [15316] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.243 +07 [18212] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 11:27:03.256 +07 [8960] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:34:46.306 +07 [5100] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:34:46.306 +07 [5100] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Ho_Chi_Minh', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.257 +07 [19548] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.257 +07 [19548] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.261 +07 [19988] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.261 +07 [19988] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.265 +07 [14432] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.265 +07 [14432] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.269 +07 [6596] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.269 +07 [6596] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/event' AS url, NULL AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.297 +07 [15556] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.297 +07 [15556] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/event' AS url, NULL AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:28.509 +07 [15084] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:28.509 +07 [15084] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:29.186 +07 [14304] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:29.186 +07 [14304] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/event' AS url, NULL AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:29.301 +07 [1864] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:29.301 +07 [1864] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/event' AS url, NULL AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:30.230 +07 [1864] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:30.230 +07 [1864] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/event' AS url, NULL AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:42:30.265 +07 [19988] ERROR:  could not serialize access due to concurrent update
2023-10-07 12:42:30.265 +07 [19988] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Bangkok', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 12:45:45.206 +07 [19548] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [5100] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [1864] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [14304] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [14432] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [6596] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.207 +07 [15556] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.208 +07 [19988] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.208 +07 [15084] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.212 +07 [14268] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.219 +07 [1928] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.219 +07 [16652] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.219 +07 [6044] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.220 +07 [16580] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 12:45:45.221 +07 [8324] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 21:26:44.762 +07 [17356] ERROR:  could not serialize access due to concurrent update
2023-10-07 21:26:44.762 +07 [17356] STATEMENT:  
	                WITH visitor AS (
	                    
	            INSERT INTO website_visitor (
	                partner_id, access_token, last_connection_datetime, visit_count, lang_id,
	                website_id, timezone, write_uid, create_uid, write_date, create_date, country_id)
	            VALUES (
	                3, 3, now() at time zone 'UTC', 1, 1,
	                1, 'Asia/Ho_Chi_Minh', 2, 2,
	                now() at time zone 'UTC', now() at time zone 'UTC', (
	                    SELECT id FROM res_country WHERE code = NULL
	                )
	            )
	            ON CONFLICT (access_token)
	            DO UPDATE SET
	                last_connection_datetime=excluded.last_connection_datetime,
	                visit_count = CASE WHEN website_visitor.last_connection_datetime < NOW() AT TIME ZONE 'UTC' - INTERVAL '8 hours'
	                                    THEN website_visitor.visit_count + 1
	                                    ELSE website_visitor.visit_count
	                                END
	            RETURNING id, CASE WHEN create_date = now() at time zone 'UTC' THEN 'inserted' ELSE 'updated' END AS upsert
	        , 'http://localhost:8069/' AS url, 4 AS page_id
	                ), track AS (
	                    INSERT INTO website_track (visitor_id, url, page_id, visit_datetime)
	                    SELECT id, url, page_id::integer, now() at time zone 'UTC' FROM visitor
	                )
	                SELECT id, upsert from visitor;
	            
2023-10-07 21:27:28.608 +07 [16180] ERROR:  could not serialize access due to concurrent update
2023-10-07 21:27:28.608 +07 [16180] STATEMENT:  
	            SELECT *, cron_name->>'en_US' as cron_name
	            FROM ir_cron
	            WHERE active = true
	              AND numbercall != 0
	              AND (nextcall <= (now() at time zone 'UTC')
	                OR EXISTS (
	                    SELECT cron_id
	                    FROM ir_cron_trigger
	                    WHERE call_at <= (now() at time zone 'UTC')
	                      AND cron_id = ir_cron.id
	                )
	              )
	              AND id in (19)
	            ORDER BY priority
	            LIMIT 1 FOR NO KEY UPDATE SKIP LOCKED
	        
2023-10-07 21:48:51.325 +07 [16180] ERROR:  null value in column "code" violates not-null constraint
2023-10-07 21:48:51.325 +07 [16180] DETAIL:  Failing row contains (1, null, null, null, 10, null, 1, null, null, null, null, null, null, null, 2, 2, 0, {"en_US": "10/5/2023"}, null, bank, invoice, odoo, undefined, null, null, t, null, f, t, t, 2023-10-07 14:48:51.289714, 2023-10-07 14:48:51.289714).
2023-10-07 21:48:51.325 +07 [16180] STATEMENT:  INSERT INTO "account_journal" ("active", "bank_statements_source", "color", "company_id", "create_date", "create_uid", "invoice_reference_model", "invoice_reference_type", "name", "payment_sequence", "refund_sequence", "sale_activity_type_id", "sequence", "show_on_dashboard", "type", "write_date", "write_uid") VALUES (true, 'undefined', 0, 1, '2023-10-07 14:48:51.289714', 2, 'odoo', 'invoice', '{"en_US": "10/5/2023"}', true, false, NULL, 10, true, 'bank', '2023-10-07 14:48:51.289714', 2) RETURNING "id"
2023-10-07 21:49:49.293 +07 [16180] ERROR:  null value in column "code" violates not-null constraint
2023-10-07 21:49:49.293 +07 [16180] DETAIL:  Failing row contains (2, null, null, null, 10, null, 1, null, null, null, null, null, null, null, 2, 2, 0, {"en_US": "hóa đơn khách hàng"}, null, bank, invoice, odoo, undefined, null, null, t, null, f, t, t, 2023-10-07 14:49:49.28126, 2023-10-07 14:49:49.28126).
2023-10-07 21:49:49.293 +07 [16180] STATEMENT:  INSERT INTO "account_journal" ("active", "bank_statements_source", "color", "company_id", "create_date", "create_uid", "invoice_reference_model", "invoice_reference_type", "name", "payment_sequence", "refund_sequence", "sale_activity_type_id", "sequence", "show_on_dashboard", "type", "write_date", "write_uid") VALUES (true, 'undefined', 0, 1, '2023-10-07 14:49:49.281260', 2, 'odoo', 'invoice', '{"en_US": "h\u00f3a \u0111\u01a1n kh\u00e1ch h\u00e0ng"}', true, false, NULL, 10, true, 'bank', '2023-10-07 14:49:49.281260', 2) RETURNING "id"
2023-10-07 21:50:25.915 +07 [7472] ERROR:  null value in column "code" violates not-null constraint
2023-10-07 21:50:25.915 +07 [7472] DETAIL:  Failing row contains (3, null, null, null, 10, null, 1, null, null, null, null, null, null, null, 2, 2, 0, {"en_US": "hóa đơn khách hàng"}, null, bank, invoice, odoo, undefined, null, null, t, null, f, t, t, 2023-10-07 14:50:25.900912, 2023-10-07 14:50:25.900912).
2023-10-07 21:50:25.915 +07 [7472] STATEMENT:  INSERT INTO "account_journal" ("active", "bank_statements_source", "color", "company_id", "create_date", "create_uid", "invoice_reference_model", "invoice_reference_type", "name", "payment_sequence", "refund_sequence", "sale_activity_type_id", "sequence", "show_on_dashboard", "type", "write_date", "write_uid") VALUES (true, 'undefined', 0, 1, '2023-10-07 14:50:25.900912', 2, 'odoo', 'invoice', '{"en_US": "h\u00f3a \u0111\u01a1n kh\u00e1ch h\u00e0ng"}', true, false, NULL, 10, true, 'bank', '2023-10-07 14:50:25.900912', 2) RETURNING "id"
2023-10-07 22:35:43.784 +07 [16180] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.785 +07 [7472] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.791 +07 [19116] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.793 +07 [10496] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.793 +07 [8316] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.794 +07 [17356] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.794 +07 [17468] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
2023-10-07 22:35:43.801 +07 [9648] LOG:  could not receive data from client: An existing connection was forcibly closed by the remote host.
	
